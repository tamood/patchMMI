#!/usr/bin/env python3

# See LICENSE.SiFive for license details.

from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import doctest
import sys
import warnings

verilog_template = """
module {name}(
  input clock,
  input oe,
  input me,
  input [{address_bits_minus_1}:0] address,
  output [{output_width_minus_1}:0] q
);

wire  [{output_width_minus_1}:0]     ram_out;

// xpm_memory_sprom: Single Port ROM
// Xilinx Parameterized Macro, version 2019.1
xpm_memory_sprom #(
 .ADDR_WIDTH_A({address_bits_minus_1}+1), // DECIMAL
 .AUTO_SLEEP_TIME(0), // DECIMAL
 .CASCADE_HEIGHT(0), // DECIMAL
 .ECC_MODE("no_ecc"), // String
 .MEMORY_INIT_FILE("{rom_hex_file}"), // String
 .MEMORY_INIT_PARAM("0"), // String
 .MEMORY_OPTIMIZATION("false"), // String
 .MEMORY_PRIMITIVE("auto"), // String
 .MEMORY_SIZE({output_width}*{depth}), // DECIMAL
 .MESSAGE_CONTROL(0), // DECIMAL
 .READ_DATA_WIDTH_A({output_width}), // DECIMAL
 .READ_LATENCY_A(1), // DECIMAL
 .READ_RESET_VALUE_A("0"), // String
 .RST_MODE_A("SYNC"), // String
 .SIM_ASSERT_CHK(0), // DECIMAL; 0=disable simulation messages, 1=enable simulation messages
 .USE_MEM_INIT(0), // DECIMAL
 .WAKEUP_TIME("disable_sleep") // String
)
xpm_memory_sprom_inst (
 .dbiterra(dbiterra), // 1-bit output: Leave open.
 .douta(ram_out), // READ_DATA_WIDTH_A-bit output: Data output for port A read operations.
 .sbiterra(sbiterra), // 1-bit output: Leave open.
 .addra(address), // ADDR_WIDTH_A-bit input: Address for port A read operations.
 .clka(clock), // 1-bit input: Clock signal for port A.
 .ena(me), // 1-bit input: Memory enable signal for port A. Must be high on clock
 // cycles when read operations are initiated. Pipelined internally.
 .injectdbiterra(injectdbiterra), // 1-bit input: Do not change from the provided value.
 .injectsbiterra(injectsbiterra), // 1-bit input: Do not change from the provided value.
 .regcea(regcea), // 1-bit input: Do not change from the provided value.
 .rsta(rsta), // 1-bit input: Reset signal for the final port A output register stage.
 // Synchronously resets output port douta to the value specified by
 // parameter READ_RESET_VALUE_A.
 .sleep(sleep) // 1-bit input: sleep signal to enable the dynamic power saving feature.
);
// End of xpm_memory_sprom_inst instantiation
				
assign q = oe ? ram_out : {output_width}'bZ;				

endmodule 
"""


def gen_rom(name, width, depth, rom_hex_file):
    variables = {
        'name': name,
        'address_bits_minus_1': (depth - 1).bit_length() - 1,
        'depth': depth,
        'depth_minus_1': depth - 1,
        'output_width': width,
        'output_width_minus_1': width - 1,
        # $random in verilog returns 32 bits; compute how many times to repeat
        # $random in order to fill the width
        'num_random_blocks': (width - 1) // 32 + 1,
        'rom_hex_file': rom_hex_file,
    }
    return verilog_template.format(**variables)


def try_cast_int(x):
    try:
        return int(x)
    except ValueError:
        return x

def parse_line(line):
    x=line.split()
    return { x[i] : try_cast_int(x[i+1]) for i in range(0, len(x), 2 ) }

def main():
    if '--run-tests' in sys.argv:
        (failures, total) = doctest.testmod(verbose=True)
        sys.exit(1 if failures else 0)

    if len(sys.argv) < 2:
        sys.exit('Please give a .conf file as input')

    print('// This file created by ' + __file__)
    with open(sys.argv[1]) as fp:
        lines = fp.readlines()
        if len(lines) > 1:
            warnings.warn('vlsi_rom_gen detected multiple ROMs. ROM contents will be duplicated.')
        for line in lines:
            verilog = gen_rom(rom_hex_file=sys.argv[2], **parse_line(line))
            print(verilog)

if __name__ == '__main__':
    main()
